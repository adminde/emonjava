apply from: "configuration.gradle"

configure(allprojects) {
  version = cfgVersion
}

configure(javaProjects) {

  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'osgi'
  apply plugin: 'maven'

  group = cfgGroup

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  repositories { mavenCentral() }

  sourceSets {
    sample
    itest {
      compileClasspath += sourceSets.main.runtimeClasspath
    }
  }

  dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    itestCompile group: 'junit', name: 'junit', version: '4.12'
  }

  jar {
    manifest {
      version = project.version.replace('-','.');
    }
  }
  
  task jarAll(type: Copy) {
    dependsOn(configurations.default.getAllArtifacts().getBuildDependencies())

    //only the jar file created:
    from configurations.default.getAllArtifacts().getFiles()

    ext.isDocProject = false;
    docProjects.findAll {
      if (it.getPath() == project.path) {
        isDocProject = true;
      }
    }
    
    if (isDocProject) {
      //configurations.archives also contains source and javadoc files
      configurations.archives.getArtifacts().all {
        if (it.file.name.endsWith("sources.jar") || it.file.name.endsWith("javadoc.jar")) {
          from project.files(it.file)
        }
      }
    }

    if (cfgCopyDependencies) {
      if (cfgCopyToRoot) {
        into rootDir.getPath() + "/build/libs-all"
      }
      else {
        into "build/libs-all"
      }
      //includes all the dependencies:
      from configurations.default
    }
    else {
      if (cfgCopyToRoot) {
        into rootDir.getPath() + "/build/libs-all"
      }
      else {
        into "build/libs-all"
      }
    }
  }

  build.dependsOn(jarAll)

  eclipse.pathVariables([GRADLE_USER_HOME:file(gradle.gradleUserHomeDir)])
  tasks.eclipse.dependsOn(cleanEclipse)


  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  javadoc {
    exclude '**/internal/**'
    exclude '**/java-gen/**'
    exclude '**/app/**'
  }

}

configure(docProjects) {
  jarAll.dependsOn sourcesJar
  jarAll.dependsOn javadocJar
}

task javadocAll(type: Javadoc) {

  source docProjects.collect {
    project -> project.sourceSets.main.allJava
  }

  exclude '**/internal/**'

  destinationDir = new File(buildDir, 'docs/javadoc-all')

  classpath = files(distributionProjects.collect { project ->
    project.sourceSets.main.compileClasspath })

  classpath += files(distributionProjects.collect { project ->
    project.sourceSets.main.output })
}


task writeSettings << {
  Writer out = new OutputStreamWriter(new FileOutputStream("build/settings.gradle"));
  out.write("include ");
  boolean first = true;
  for (Project myproject: distributionProjects) {
    if (!myproject.getProjectDir().equals(getProjectDir())) {
      if (first == true) {
        first = false;
      }
      else {
        out.write ", ";
      }
      out.write "'" + myproject.name + "'"
    }
  }
  out .write "\n\n";

  for (Project myproject: distributionProjects) {
    if (!myproject.getProjectDir().equals(getProjectDir())) {
      println myproject.name
      out.write 'project(":' + myproject.name + '").projectDir = file("' + myproject.getProjectDir().toString().substring((int)(getProjectDir().toString().size() + 1)) + '")\n';
    }
  }

  out.close();
}

task buildDistProjects {
  dependsOn(distributionProjects.build)
}

tasks.withType(Tar) {

  dependsOn(writeSettings)
  dependsOn(distributionProjects.build)
  dependsOn(javadocAll)

  compression = Compression.GZIP
  
  destinationDir = file('build/distributions/')
}

task (tarFull, type: Tar) {
  archiveName = project.name + "-" + project.version + "_full.tgz"
}


task (tar, type: Tar) {
  archiveName = project.name + "-" + project.version + ".tgz"
}

if (!javaProjects.contains(project)) {
  task clean (type: Delete) {
    delete "build"
  }
}
